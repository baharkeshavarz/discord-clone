generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id           Int        @id @default(autoincrement())
  userId       String     @unique
  name         String
  imageUrl     String     @db.Text
  email        String     @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  servers   Server[]  // define 1-many relationship
  members   Member[]
  channels  Channel[]
}

model Server {
  id          Int  @id  @default(autoincrement())
  name        @db.VarChar(255)
  imageUrl    String  @db.Text
  inviteCode  String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId Int   // field of db
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id         Int         @id @default(autoincrement())
  role       MemberRole  @default(GUEST)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  profileId Int
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId Int
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id     Int            @id  @default(autoincrement())
  name   @db.VarChar(255)
  type  ChannelType     @default(TEXT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  profileId Int
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId Int
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id        Int       @id @default(autoincrement())
  content   String    @db.Text
  fileUrl   String?   @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  memberId Int
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId Int
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id    Int  @id @default(autoincrement())

  memberOneId Int
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId Int
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id        Int       @id @default(autoincrement())
  content   String    @db.Text
  fileUrl   String?   @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  memberId Int
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId Int
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  @@index([memberId])
  @@index([conversationId])
}